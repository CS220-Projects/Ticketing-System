# Generated by Django 3.2.8 on 2021-11-12 01:33

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customerID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phoneNumber', models.IntegerField()),
                ('customerName', models.CharField(max_length=100)),
                ('gender', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Franchise',
            fields=[
                ('franchiseID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('franchiseName', models.CharField(max_length=500)),
                ('franchiseLocation', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('itemID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('itemName', models.CharField(max_length=500)),
                ('itemPrice', models.DecimalField(decimal_places=2, max_digits=20)),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant_Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restaurantID', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('restaurantLocation', models.CharField(max_length=500)),
                ('restaurantName', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staffID', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('staffName', models.CharField(max_length=500)),
                ('staffStartDate', models.DateTimeField(auto_now=True)),
                ('staffTenure', models.CharField(max_length=500)),
                ('staffGender', models.CharField(max_length=500)),
                ('staffSalary', models.DecimalField(decimal_places=2, max_digits=20)),
                ('franchiseID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Restaurant_Manager', to='ticketing_system.franchise')),
                ('restaurantID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Restaurant_Manager', to='ticketing_system.restaurant_location')),
            ],
            options={
                'unique_together': {('staffID', 'restaurantID', 'franchiseID')},
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('ticketID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timeToFulfill', models.DecimalField(decimal_places=2, max_digits=20)),
                ('specialRequests', models.CharField(max_length=500)),
                ('completedStatus', models.BooleanField(default=False)),
                ('orderDate', models.DateTimeField(auto_now_add=True)),
                ('tip', models.DecimalField(decimal_places=2, max_digits=20)),
            ],
        ),
        migrations.AddField(
            model_name='restaurant_location',
            name='ManagerID',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Restaurant_Manager', to='ticketing_system.staff'),
        ),
        migrations.AddField(
            model_name='restaurant_location',
            name='franchiseID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Restaurant_Franchise', to='ticketing_system.franchise'),
        ),
        migrations.CreateModel(
            name='Ticket_Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currentPrice', models.DecimalField(decimal_places=2, max_digits=20)),
                ('quantity', models.IntegerField()),
                ('itemID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Item_Ticket', to='ticketing_system.item')),
                ('ticketID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Item_Ticket', to='ticketing_system.ticket')),
            ],
            options={
                'unique_together': {('ticketID', 'itemID')},
            },
        ),
        migrations.CreateModel(
            name='Staff_On_Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staffID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Staff_On_Ticket', to='ticketing_system.staff')),
                ('ticketID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Staff_On_Ticket', to='ticketing_system.ticket')),
            ],
            options={
                'unique_together': {('ticketID', 'staffID')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='restaurant_location',
            unique_together={('franchiseID', 'restaurantID')},
        ),
        migrations.CreateModel(
            name='Customer_On_Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customerID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Customer_On_Ticket', to='ticketing_system.customer')),
                ('ticketID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Customer_On_Ticket', to='ticketing_system.ticket')),
            ],
            options={
                'unique_together': {('ticketID', 'customerID')},
            },
        ),
    ]
